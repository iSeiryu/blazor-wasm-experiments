@using System.Text.Json
@using BlazorTests.Shared
@inherits LayoutComponentBase
@inject IJSRuntime JS

<Styled @bind-Classname="@_topRowHeightClass">
    height: @(_topRowHeight)rem;
</Styled>

<Styled @bind-Classname="@_sideBarWidthClass">
    width: @(_sideBarWidth)px;
</Styled>

<div class="page">
    <div class="@_sideBarWidthClass sidebar">
        <NavMenu />
    </div>

    <div class="main">
        <div class="@_topRowHeightClass top-row px-4">
            <a href="http://blazor.net" target="_blank" class="ml-md-auto">About</a>
        </div>

        <CascadingValue Value="@possibleContentWidth" Name="possibleContentWidth">
            <CascadingValue Value="@possibleContentHeight" Name="possibleContentHeight">
                <div class="content">
                    @Body
                </div>
            </CascadingValue>
        </CascadingValue>
    </div>
</div>

@code {
    private double possibleContentWidth { get; set; } = 0;
    private double possibleContentHeight { get; set; } = 0;
    private const int _remToPxRatio = 16;
    private const int _mediaMinWidth = 641;
    private const int _sideBarWidth = 250;
    private const double _topRowHeight = 3.5;
    private string _topRowHeightClass;
    private string _sideBarWidthClass;

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        await GetMedia();
    }

    private async Task GetMedia() {
        var windowWidth = await JS.InvokeAsync<double>("window.getCurrentWindowWidth");
        var windowHeight = await JS.InvokeAsync<double>("window.getCurrentWindowHeight");
        SetPossibleContentDimensions(windowWidth, windowHeight);
    }

    private void SetPossibleContentDimensions(double windowWidth, double windowHeight)
    {
        possibleContentWidth = windowWidth - (windowWidth <= _mediaMinWidth ? 0 : _sideBarWidth);
        possibleContentHeight = (windowHeight - (_topRowHeight * _remToPxRatio));
    }
}
